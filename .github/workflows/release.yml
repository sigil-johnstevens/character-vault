name: Release Creation

on: 
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Get part of the tag after the `v`
    - name: Extract tag version number
      id: get_version
      uses: battila7/get-version-action@v2

    # Set the version environment variable
    - name: Set version environment variable
      run: echo "version-without-v=${{ steps.get_version.outputs.version-without-v }}" >> $GITHUB_ENV

    # Substitute the Manifest and Download URLs in the module.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      uses: microsoft/variable-substitution@v1
      with:
        files: 'module.json'
      env:
        version: ${{ env.version-without-v }}
        url: https://github.com/${{ github.repository }}
        manifest: https://github.com/${{ github.repository }}/releases/latest/download/module.json
        download: https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/module.zip

    # Create a zip file with all files required by the module to add to the release
    - name: Create ZIP
      run: zip -r ./module.zip src packs license.md module.json index.js

    # Create a release for this specific version
    - name: Update Release with Files
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: ${{ github.event.release.name }}
        draft: ${{ github.event.release.unpublished }}
        prerelease: ${{ github.event.release.prerelease }}
        token: ${{ secrets.ACTION_PAT }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}

    # Publish to Foundry VTT
    - name: Publish to Foundry VTT
      env:
        FOUNDRY_API_TOKEN: ${{ secrets.FOUNDRY_API_TOKEN }}
      run: |
        MODULE_ID="character-vault"  # Replace with your module ID
        MANIFEST_URL="https://github.com/${{ github.repository }}/releases/latest/download/module.json"
        DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/module.zip"
        VERSION=${{ github.event.release.tag_name }}  # Use the version from the GitHub release tag

        # Create the JSON payload
        PAYLOAD=$(jq -n \
          --arg id "$MODULE_ID" \
          --arg version "$VERSION" \
          --arg manifest "$MANIFEST_URL" \
          --arg download "$DOWNLOAD_URL" \
          '{
            "id": $id,
            "version": $version,
            "manifest": $manifest,
            "download": $download
          }')

        # Make the API call
        curl -X POST https://foundryvtt.com/api/package/release \
          -H "Authorization: Bearer $FOUNDRY_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD"
