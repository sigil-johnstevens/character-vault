name: Release Creation

on: 
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Get part of the tag after the `v`
    - name: Extract tag version number
      id: get_version
      uses: battila7/get-version-action@v2

    # Set the version environment variable
    - name: Set version environment variable
      run: echo "version-without-v=${{ steps.get_version.outputs.version-without-v }}" >> $GITHUB_ENV

    # Substitute the Manifest and Download URLs in the module.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      uses: microsoft/variable-substitution@v1
      with:
        files: 'module.json'
      env:
        version: ${{ env.version-without-v }}
        url: https://github.com/${{ github.repository }}
        manifest: https://github.com/${{ github.repository }}/releases/latest/download/module.json
        download: https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/module.zip

    # Create a zip file with all files required by the module to add to the release
    - name: Create ZIP
      run: zip -r ./module.zip src packs license.md module.json index.js

    # Create a release for this specific version
    - name: Update Release with Files
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: ${{ github.event.release.name }}
        draft: ${{ github.event.release.unpublished }}
        prerelease: ${{ github.event.release.prerelease }}
        token: ${{ secrets.ACTION_PAT }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}

    # Publish to Foundry VTT
    - name: Publish Module to FoundryVTT Website
      id: publish-to-foundry-website
      continue-on-error: true
      uses: cs96and/FoundryVTT-release-package@v1
      with:
        package-token: ${{ secrets.FOUNDRY_API_TOKEN }}
        manifest-url: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.json
