const MODULE_ID = "character-vault";

// Register Access Token, Path, and Repo as Game Settings
Hooks.once('init', () => {
    game.settings.register(MODULE_ID, "githubRepo", {
        name: "GitHub Repository",
        hint: "The GitHub repository where your actor JSON files are stored.",
        scope: "world",
        config: true,
        type: String,
        default: "yourRepo",
    });

    game.settings.register(MODULE_ID, "githubPath", {
        name: "GitHub Path",
        hint: "The path within the GitHub repository to the folder containing the actor JSON files.",
        scope: "world",
        config: true,
        type: String,
        default: "actors",
    });

    game.settings.register(MODULE_ID, "githubPAT", {
        name: "GitHub Personal Access Token",
        hint: "Your GitHub Personal Access Token (PAT) for accessing the repository.",
        scope: "world",
        config: true,
        type: String,
        default: "yourPAT",
        secret: true,
        onChange: value => {
            console.log("GitHub PAT updated");
        }
    });

    game.settings.register(MODULE_ID, "passwordStrength", {
        name: "Password Strength",
        hint: "Select the type of password generated by DinoPass.",
        scope: "world",
        config: true,
        type: String,
        choices: {
            "simple": "Simple",
            "strong": "Strong"
        },
        default: "simple",
    });
});

import { generateUsers } from './src/createUsers.js';
import { fetchGitHubActorList, openImportDialog, openFolderImportDialog, importActorFromGitHubToActor } from './src/importActors.js';
import { openFolderUploadDialog, uploadActorsFromFolderToGitHub, uploadToGitHub, uploadActorToGitHub, toBase64 } from './src/uploadActors.js';

Hooks.once("ready", () => {
    window.generateUsers = generateUsers;
    window.fetchGitHubActorList = fetchGitHubActorList;
    window.openImportDialog = openImportDialog;
    window.importActorFromGitHubToActor = importActorFromGitHubToActor;
    window.openFolderUploadDialog = openFolderUploadDialog;
    window.openFolderImportDialog = openFolderImportDialog;
    window.uploadActorsFromFolderToGitHub = uploadActorsFromFolderToGitHub;
    window.uploadToGitHub = uploadToGitHub;
    window.toBase64 = toBase64;
    window.uploadActorToGitHub = uploadActorToGitHub;
    console.log("Character Vault: Functions are now globally available.");
});

Hooks.on("renderActorDirectory", (app, html, data) => {
  if (!game.user.isGM) return;

  const footer = html.querySelector(".directory-footer");
  if (!footer) return;

  // Button: Generate Users
  const generateUsersBtn = document.createElement("button");
  generateUsersBtn.classList.add("create-entity");
  generateUsersBtn.innerHTML = `<i class="fa-solid fa-user-plus"></i> Generate Users`;
  generateUsersBtn.addEventListener("click", () => {
    generateUsers();
  });

  // Button: Import from GitHub
  const importGitHubBtn = document.createElement("button");
  importGitHubBtn.classList.add("create-entity");
  importGitHubBtn.innerHTML = `<i class="fa-solid fa-cloud-arrow-down"></i> Import from GitHub`;
  importGitHubBtn.addEventListener("click", () => {
    openFolderImportDialog();
  });

  // Button: Delete Non-GM Users
  const deleteNonGMBtn = document.createElement("button");
  deleteNonGMBtn.classList.add("create-entity");
  deleteNonGMBtn.innerHTML = `<i class="fa-solid fa-user-slash"></i> Delete Non-GM Users`;
  deleteNonGMBtn.addEventListener("click", async () => {
    const nonGMs = game.users.filter(user => !user.isGM);
    for (let user of nonGMs) {
      console.log(`Removing user: ${user.name}`);
      await user.delete();
    }
    ui.notifications.info("All non-GM users have been removed.");
  });

  // Button: Upload Folder to GitHub
  const uploadFolderBtn = document.createElement("button");
  uploadFolderBtn.classList.add("create-entity");
  uploadFolderBtn.innerHTML = `<i class="fa-solid fa-cloud-arrow-up"></i> Upload Folder to GitHub`;
  uploadFolderBtn.addEventListener("click", () => {
    openFolderUploadDialog();
  });
  // Append all buttons
  footer.appendChild(generateUsersBtn);
  footer.appendChild(importGitHubBtn);
  footer.appendChild(deleteNonGMBtn);
  footer.appendChild(uploadFolderBtn);
});

// Conext Menu Function
Hooks.on("getActorContextOptions", (html, options) => {
  const getActor = (/** @type {HTMLElement} */ li) => game.actors.get(li.dataset.entryId);

  options.push({
    name: "Import from GitHub",
    icon: '<i class="fa-solid fa-cloud-arrow-down"></i>',
    condition: (li) => getActor(li)?.isOwner,
    callback: (li) => openImportDialog(getActor(li).id)
  });

  options.push({
    name: "Export to GitHub",
    icon: '<i class="fa-solid fa-cloud-arrow-up"></i>',
    condition: (li) => game.user.isGM && getActor(li)?.isOwner,
    callback: (li) => uploadActorToGitHub(getActor(li))
  });
});

